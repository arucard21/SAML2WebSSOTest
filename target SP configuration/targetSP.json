# This module contains the configuration for the SP test.
#
# It should contain the information that is required to run the test on a Service Provider, i.e. the target SP. The following pieces of
# information should be provided:
# 
# * the URL to the start page of the SP
# 
# * the SP metadata. This can be either the XML itself or a URL to the hosted metdata. You can use a \ character at the end to continue on a new line
#  
# * The successful login criteria. This defines how the test should evaluate if a login attempt was successful. The test can evaluate a
#   login attempt in 3 different ways:
#   * HTTP_Statuscode: The test can match the HTTP Statuscode that it receives when logging in against one that is provided here.
#	* URL: The test can match the page's URL against one that is provided here. It will test if the given string is contained within the string
#	  representation of the URL. 
#   * Cookies: The test can look for any cookies that should be available whenever a login attempt is successful. You can define just the name of
#     the cookie or both the name and value of the cookie. If both are provided, the test will look for a cookie with the provided name and try to
#     match that cookie's value against the provided value. You can specify multiple cookies by adding a new property line with an incremented
#	  number, e.g. "targetSP.login.cookie.1". Note that all specified cookies must be found to be considered a match.
#   * Content: The test can match the HTML code of the page it receives when it has attempted a login against a regex pattern that you
#     provide. This allows you to specify the specific page that should shown when a login attempt is successful
#   Note that the test will check all the criteria it finds here and will only accept a login attempt as successful when all criteria matches.
# 
# * The attributes that the SP requires in order to log in correctly. It should be specified by providing the attribute's namespace, 
#	namespace prefix, name, name format, friendly name and its value. If necessary, you can add any custom XML attributes afterwards by first 
# 	specifying the attribute name (with namespace prefix)and then the value, 
# 	e.g. "targetSP.idp.attribute.0=urn:oasis:names:tc:SAML:2.0:profiles:attribute:X500,x500,urn:oid:2.5.4.42,urn:oasis:names:tc:SAML:2.0:attrname-format:uri,givenName,dean,x500:Encoding,LDAP"
# 	If no custom XML attributes are used, you can leave the namespace and prefix empty, e.g. "targetSP.idp.attribute.1=,,name,nameformat,friendlyname,value".
# 	You can specify multiple SAML attributes here by adding a new property line with an incremented number, e.g. "targetSP.idp.attribute.1".  
# 
# * It might be necessary to interact with the web pages in order to log in correctly. These interactions can be specified here and it is 
# 	possible to specify multiple successive interactions. There are 2 points in the login process where interaction could be required:
#	* prelogin: This is the point where the start page of the SP is accessed but some interaction might be required in order to get the SP to 
#	  send the AuthnRequest to the IdP (e.g. an IdP selection form).
#	* postresponse: This is the point where the IdP sends its Response but some interaction might be necessary in order to get the SP to 
#	  actually log in (e.g. accepting the attributes sent in the Response).
#	You can interact with the webpages in 2 ways (which are postfixed to the "targetSP.interaction." property names):
#	* form: You can specify that should be submitted, along with the information required for submitting it. This requires at least the
#	  name of the form and the name of the submit button. In order for the form to actually be useful, you should probably also define
#	  the name and value of some input fields. You can specify multiple forms by adding a new property line with an incremented number for
#	  the form, e.g. "targetSP.interaction.prelogin.form.1". You can specify multiple input fields by simply adding them to the property line, e.g. 
#	  "formname,submitname,inputname,inputvalue,inputname2,inputvalue2" (make sure to define both the name and desired value for each input field).
#	  Note that the value here is used to set the value attribute on the input field, so it should be defined accordingly.
#	* link: You can specify a link that should be clicked by giving either its name, the (entire) text of the link or the path specified by the link.
#	  You can do this by using "name", "text" or "href" as the first part of the property value, e.g. "targetSP.interaction.postresponse.link.0=href,anchorHref"
#	  Similar to some other properties, you can specify multiple links creating an additional property line with an incremented number, e.g.
#	  "targetSP.interaction.postresponse.link.1".
# 
# This JSON file should be used as the value for the -s or --spconfig parameter when running the SPTestRunner.
{
	startPage: "<url>",
	metadata: "<string>",
	loginStatuscode: 200,
	loginURL: "<url>",
	loginContent: "<regex>",
	loginCookies: [ {name: "<name>", value: <value>} ],
	attributes: [
	{ namespace: "<namespace>", prefix: "<prefix>", attributeName: "<name>", nameFormat: "<nameformat>", friendlyName: "<friendlyname>", attributeValue: "<value>", customAttributes:[ { name: "<customname>", value: "<customvalue>" } ] }
	],
	preLoginInteractions: [
		{ interactionType: "<form/link/element>", lookupAttribute: "<id/name/href/text>", lookupValue: "<value>" }
	],
	postResponseInteractions: [
		{ interactionType: "<form/link/element>", lookupAttribute: "<id/name/href/text>", lookupValue: "<value>", submitName: "<name>", inputs: [ { name: "<inputname>", value: "<inputvalue>" } ] }
	]
}
